// <auto-generated />
using System;
using Generic.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Generic.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200825155647_AddAspNetIdentity")]
    partial class AddAspNetIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Generic.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobsCompleted")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("OnBudget")
                        .HasColumnType("int");

                    b.Property<int?>("OnTime")
                        .HasColumnType("int");

                    b.Property<string>("OtherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("RepeatHireRate")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Generic.Data.Models.TblApproval", b =>
                {
                    b.Property<int>("ApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ApprovalID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnName("Approval_date")
                        .HasColumnType("datetime");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("ApprovalId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_Approval");
                });

            modelBuilder.Entity("Generic.Data.Models.TblBusinessContinuityPolicy", b =>
                {
                    b.Property<int>("BizConPolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BizConPolID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HasBizConPolicy")
                        .HasColumnType("bit");

                    b.Property<int?>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("UploadedFile")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("BizConPolId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_BusinessContinuityPolicy");
                });

            modelBuilder.Entity("Generic.Data.Models.TblCertifyingOrg", b =>
                {
                    b.Property<int>("CertOrgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CertOrgID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CertOrgName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("CertOrgId");

                    b.ToTable("tbl_CertifyingOrg");
                });

            modelBuilder.Entity("Generic.Data.Models.TblCity", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CityID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CityId");

                    b.ToTable("tbl_City");
                });

            modelBuilder.Entity("Generic.Data.Models.TblContactPersons", b =>
                {
                    b.Property<int>("ContactPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ContactPersonID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("WorkPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("ContactPersonId");

                    b.ToTable("tbl_ContactPersons");
                });

            modelBuilder.Entity("Generic.Data.Models.TblCorpSocialResponsibility", b =>
                {
                    b.Property<int>("CsrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CSR_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FraudMalpracticePolicy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SrethHumanLaborLaws")
                        .IsRequired()
                        .HasColumnName("SREthHumanLaborLaws")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("ThirdPartySocAudit")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("CsrId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_CorpSocialResponsibility");
                });

            modelBuilder.Entity("Generic.Data.Models.TblCorporateDistinctives", b =>
                {
                    b.Property<int>("CorpDisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CorpDisID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("CorpDisId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_CorporateDistinctives");
                });

            modelBuilder.Entity("Generic.Data.Models.TblCountry", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CountryID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CountryId");

                    b.ToTable("tbl_Country");
                });

            modelBuilder.Entity("Generic.Data.Models.TblCyMfgFf", b =>
                {
                    b.Property<int>("CyMfgFfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CY_MFG_FF_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnName("CityID")
                        .HasColumnType("int");

                    b.Property<decimal?>("FactoryArea")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("PlantsEqiupmentNumber")
                        .HasColumnType("int");

                    b.Property<string>("PlantsEquipmentType")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("Utilization")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("CyMfgFfId");

                    b.HasIndex("CityId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_CY_MFG_FF");
                });

            modelBuilder.Entity("Generic.Data.Models.TblDeliveryInfo", b =>
                {
                    b.Property<int>("DelInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DelInfoID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("QuoMasterId")
                        .HasColumnName("QuoMasterID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SpecialInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DelInfoId");

                    b.HasIndex("QuoMasterId");

                    b.ToTable("tbl_DeliveryInfo");
                });

            modelBuilder.Entity("Generic.Data.Models.TblDepartments", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DepartmentID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("DepartmentId");

                    b.ToTable("tbl_Departments");
                });

            modelBuilder.Entity("Generic.Data.Models.TblDirectServiceScope", b =>
                {
                    b.Property<int>("ServiceScopeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ServiceScopeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaterialsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("SubCategoryId")
                        .HasColumnName("SubCategoryID")
                        .HasColumnType("int");

                    b.HasKey("ServiceScopeId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("tbl_DirectServiceScope");
                });

            modelBuilder.Entity("Generic.Data.Models.TblFinStockMarketInfo", b =>
                {
                    b.Property<int>("StockMktInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StockMktInfoID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsListed")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("StockMktInfoId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_FinStockMarketInfo");
                });

            modelBuilder.Entity("Generic.Data.Models.TblFinancialAudits", b =>
                {
                    b.Property<int>("FinAudId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FinAudID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditorAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("AuditorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FinancialAudit")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("FinAudId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_FinancialAudits");
                });

            modelBuilder.Entity("Generic.Data.Models.TblFinancialStatements", b =>
                {
                    b.Property<int>("FinStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FinStatID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnnualReport")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FinancialStatement")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("FinStatId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_FinancialStatements");
                });

            modelBuilder.Entity("Generic.Data.Models.TblForeignCompany", b =>
                {
                    b.Property<int>("ForComId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ForComID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Others")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductSupplied")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("ForComId");

                    b.HasIndex("ProductSupplied");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_ForeignCompany");
                });

            modelBuilder.Entity("Generic.Data.Models.TblFormIdentification", b =>
                {
                    b.Property<int>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("WorkPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("FormId");

                    b.ToTable("tbl_FormIdentification");
                });

            modelBuilder.Entity("Generic.Data.Models.TblHealthSafetyEnvironment", b =>
                {
                    b.Property<int>("HseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HSE_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("HseCompanyKpi")
                        .HasColumnName("HSE_CompanyKPI")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("HseManagerEmail")
                        .IsRequired()
                        .HasColumnName("HSE_ManagerEmail")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("HseManagerName")
                        .IsRequired()
                        .HasColumnName("HSE_ManagerName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("HseYearN1results")
                        .HasColumnName("HSE_YearN1Results")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Hsepolicy")
                        .HasColumnName("HSEPolicy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("StaffTraining")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("ThirdPartyAudit")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("WorkPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("HseId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_HealthSafetyEnvironment");
                });

            modelBuilder.Entity("Generic.Data.Models.TblHseCertification", b =>
                {
                    b.Property<int>("HseCertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HSE_CertID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CertOrgId")
                        .HasColumnName("CertOrgID")
                        .HasColumnType("int");

                    b.Property<string>("CertificateCopy")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameofCertificate")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidityDate")
                        .HasColumnType("datetime");

                    b.HasKey("HseCertId");

                    b.HasIndex("CertOrgId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_HSE_Certification");
                });

            modelBuilder.Entity("Generic.Data.Models.TblKnowledgeDgssysytems", b =>
                {
                    b.Property<int>("KnowDgssysId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("KnowDGSSysID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Dgsref")
                        .IsRequired()
                        .HasColumnName("DGSRef")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProdEquSerId")
                        .HasColumnName("ProdEquSerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("KnowDgssysId");

                    b.HasIndex("ProdEquSerId");

                    b.ToTable("tbl_KnowledgeDGSSysytems");
                });

            modelBuilder.Entity("Generic.Data.Models.TblMainCustomers", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnName("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("ProdEquSerId")
                        .HasColumnName("ProdEquSerID")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.Property<int>("ValueId")
                        .HasColumnName("ValueID")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProdEquSerId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("ValueId");

                    b.ToTable("tbl_MainCustomers");
                });

            modelBuilder.Entity("Generic.Data.Models.TblNumberOfEmployees", b =>
                {
                    b.Property<int>("NoOfEmpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NoOfEmpID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Audit3rdParty")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("DepartmentId")
                        .HasColumnName("DepartmentID")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfContractEmp")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfEmployees")
                        .HasColumnType("int");

                    b.Property<int?>("NoOfExpatriates")
                        .HasColumnType("int");

                    b.Property<string>("StaffPolicy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("NoOfEmpId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_NumberOfEmployees");
                });

            modelBuilder.Entity("Generic.Data.Models.TblOfficeServiceCl", b =>
                {
                    b.Property<int>("OfficeServClId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OfficeServCL_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnName("CityID")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnName("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("SpServices")
                        .IsRequired()
                        .HasColumnName("SP_Services")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("OfficeServClId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_OfficeServiceCL");
                });

            modelBuilder.Entity("Generic.Data.Models.TblPaymentBank", b =>
                {
                    b.Property<int>("PymntBankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PymntBankID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaymentBankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("PymntBankId");

                    b.ToTable("tbl_PaymentBank");
                });

            modelBuilder.Entity("Generic.Data.Models.TblPaymentRequestDetails", b =>
                {
                    b.Property<int>("PayReqDetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PayReqDetID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Abdate")
                        .HasColumnName("ABDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Absignature")
                        .IsRequired()
                        .HasColumnName("ABSignature")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("AmountInWords")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Cbdate")
                        .HasColumnName("CBDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Cbsignature")
                        .IsRequired()
                        .HasColumnName("CBSignature")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CheckedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GlaccountCode")
                        .IsRequired()
                        .HasColumnName("GLAccountCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PayReqMasterId")
                        .HasColumnName("PayReqMasterID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Pbdate")
                        .HasColumnName("PBDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Pbsignature")
                        .IsRequired()
                        .HasColumnName("PBSignature")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PreparedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("money");

                    b.HasKey("PayReqDetId");

                    b.HasIndex("PayReqMasterId");

                    b.ToTable("tbl_PaymentRequestDetails");
                });

            modelBuilder.Entity("Generic.Data.Models.TblPaymentRequestMaster", b =>
                {
                    b.Property<int>("PayReqMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PayReqMasterID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("DepartmentProject")
                        .HasColumnType("int");

                    b.Property<DateTime>("PayReqDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PayReqNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(100);

                    b.Property<string>("Payee")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Ponumber")
                        .IsRequired()
                        .HasColumnName("PONumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PymntBankId")
                        .HasColumnName("PymntBankID")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("PayReqMasterId");

                    b.HasIndex("DepartmentProject");

                    b.HasIndex("PymntBankId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_PaymentRequestMaster");
                });

            modelBuilder.Entity("Generic.Data.Models.TblProductEquipmentService", b =>
                {
                    b.Property<int>("ProdEquSerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProdEquSerID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ProdEquSerId");

                    b.ToTable("tbl_ProductEquipmentService");
                });

            modelBuilder.Entity("Generic.Data.Models.TblProducts", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_Products");
                });

            modelBuilder.Entity("Generic.Data.Models.TblPurchaseCondition", b =>
                {
                    b.Property<int>("PoconId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("POCon_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Abdate")
                        .HasColumnName("ABDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Absignature")
                        .IsRequired()
                        .HasColumnName("ABSignature")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Cbdate")
                        .HasColumnName("CBDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Cbsignature")
                        .IsRequired()
                        .HasColumnName("CBSignature")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CheckedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Pbdate")
                        .HasColumnName("PBDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Pbsignature")
                        .IsRequired()
                        .HasColumnName("PBSignature")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("PoId")
                        .HasColumnName("PO_ID")
                        .HasColumnType("int");

                    b.Property<string>("PreparedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("PoconId");

                    b.HasIndex("PoId");

                    b.ToTable("tbl_PurchaseCondition");
                });

            modelBuilder.Entity("Generic.Data.Models.TblPurchaseOrder", b =>
                {
                    b.Property<int>("PoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PO_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("IssuedTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Pocode")
                        .IsRequired()
                        .HasColumnName("POCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("QuoteRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("PoId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_PurchaseOrder");
                });

            modelBuilder.Entity("Generic.Data.Models.TblPurchaseOrderDetails", b =>
                {
                    b.Property<int>("PodetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PODet_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("Decsription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("DeliveryTerms")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("PaymentTerms")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("PoId")
                        .HasColumnName("PO_ID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("money");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.HasKey("PodetId");

                    b.HasIndex("PoId");

                    b.ToTable("tbl_PurchaseOrderDetails");
                });

            modelBuilder.Entity("Generic.Data.Models.TblQualityCertification", b =>
                {
                    b.Property<int>("QualCertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QualCertID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CertOrgId")
                        .HasColumnName("CertOrgID")
                        .HasColumnType("int");

                    b.Property<string>("CertificateCopy")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameofCertificate")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidityDate")
                        .HasColumnType("datetime");

                    b.HasKey("QualCertId");

                    b.HasIndex("CertOrgId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_QualityCertification");
                });

            modelBuilder.Entity("Generic.Data.Models.TblQualityManagement", b =>
                {
                    b.Property<int>("QualMgtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QualMgtID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ProductQualMgt")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("QualManagerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("QualManagerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("QualityMgt")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("QualityPolicy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("WorkPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("QualMgtId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_QualityManagement");
                });

            modelBuilder.Entity("Generic.Data.Models.TblQuotationApproval", b =>
                {
                    b.Property<int>("QuoAppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QuoAppID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ApprovalSignature")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("BuyerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("QuoMasterId")
                        .HasColumnName("QuoMasterID")
                        .HasColumnType("int");

                    b.HasKey("QuoAppId");

                    b.HasIndex("QuoMasterId");

                    b.ToTable("tbl_QuotationApproval");
                });

            modelBuilder.Entity("Generic.Data.Models.TblQuotationDetail", b =>
                {
                    b.Property<int>("QuoDetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QuoDetID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Decsription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedSpec")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EstimatedCost")
                        .HasColumnType("money");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuoMasterId")
                        .HasColumnName("QuoMasterID")
                        .HasColumnType("int");

                    b.Property<string>("RefCodeStd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("QuoDetId");

                    b.HasIndex("QuoMasterId");

                    b.ToTable("tbl_QuotationDetail");
                });

            modelBuilder.Entity("Generic.Data.Models.TblQuotationMasters", b =>
                {
                    b.Property<int>("QuoMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QuoMasterID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FormNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(100);

                    b.Property<string>("Project")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("QuotationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Rfqnumber")
                        .IsRequired()
                        .HasColumnName("RFQNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("QuoMasterId")
                        .HasName("tbl_QuotationMaster");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_QuotationMasters");
                });

            modelBuilder.Entity("Generic.Data.Models.TblQuotationOtherInfo", b =>
                {
                    b.Property<int>("OtherInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OtherInfoID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AsservicesRq")
                        .IsRequired()
                        .HasColumnName("ASServicesRq")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataSheet")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mto")
                        .HasColumnName("MTO")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("QuoMasterId")
                        .HasColumnName("QuoMasterID")
                        .HasColumnType("int");

                    b.Property<bool>("SparesRequired")
                        .HasColumnType("bit");

                    b.HasKey("OtherInfoId");

                    b.HasIndex("QuoMasterId");

                    b.ToTable("tbl_QuotationOtherInfo");
                });

            modelBuilder.Entity("Generic.Data.Models.TblServices", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnName("ServiceID")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("ServiceId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_Services");
                });

            modelBuilder.Entity("Generic.Data.Models.TblSpDirectServiceScope", b =>
                {
                    b.Property<int>("SpDssId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SP_DSS_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("SpDssId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_SP_DirectServiceScope");
                });

            modelBuilder.Entity("Generic.Data.Models.TblSpDssServices", b =>
                {
                    b.Property<int>("DssServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DSS_ServiceID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ServiceId")
                        .HasColumnName("ServiceID")
                        .HasColumnType("int");

                    b.Property<int>("SpDssid")
                        .HasColumnName("SP_DSSID")
                        .HasColumnType("int");

                    b.HasKey("DssServiceId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SpDssid");

                    b.ToTable("tbl_SP_DSS_Services");
                });

            modelBuilder.Entity("Generic.Data.Models.TblState", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StateID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("StateId");

                    b.ToTable("tbl_State");
                });

            modelBuilder.Entity("Generic.Data.Models.TblSubCategory", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SubCategoryID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_SubCategory");
                });

            modelBuilder.Entity("Generic.Data.Models.TblSubContractedDetails", b =>
                {
                    b.Property<int>("SubConId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SubConID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnName("CountryID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsLocal")
                        .HasColumnType("bit");

                    b.Property<string>("SubConAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("SubConName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("SubServId")
                        .HasColumnName("SubServID")
                        .HasColumnType("int");

                    b.HasKey("SubConId");

                    b.HasIndex("CountryId");

                    b.HasIndex("SubServId");

                    b.ToTable("tbl_SubContractedDetails");
                });

            modelBuilder.Entity("Generic.Data.Models.TblSubContractedServices", b =>
                {
                    b.Property<int>("SubServId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SubServID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("PercentageOutsourced")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ServiceId")
                        .HasColumnName("ServiceID")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("SubServId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_SubContractedServices");
                });

            modelBuilder.Entity("Generic.Data.Models.TblSubsidiaryCompany", b =>
                {
                    b.Property<int>("SubsidiaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SubsidiaryID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SubsidiaryCompanyName")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("SubsidiaryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_SubsidiaryCompany");
                });

            modelBuilder.Entity("Generic.Data.Models.TblSupplierIdentification", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("CodeofConduct")
                        .HasColumnType("bit");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("CompanyProfile")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CompanyRegNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CompanyWebsiteUrl")
                        .IsRequired()
                        .HasColumnName("CompanyWebsiteURL")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ContactPersonId")
                        .HasColumnName("ContactPersonID")
                        .HasColumnType("int");

                    b.Property<int>("FormId")
                        .HasColumnName("FormID")
                        .HasColumnType("int");

                    b.Property<string>("HeadOfficeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("MissionVisionStatement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationCharts")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TaxClearanceCertificate")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ThirdPartyReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("TprId")
                        .HasColumnName("TPR_ID")
                        .HasColumnType("int");

                    b.HasKey("SupplierId");

                    b.HasIndex("ContactPersonId");

                    b.HasIndex("FormId");

                    b.HasIndex("TprId");

                    b.ToTable("tbl_SupplierIdentification");
                });

            modelBuilder.Entity("Generic.Data.Models.TblSupplierOwnership", b =>
                {
                    b.Property<int>("OwnershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OwnershipID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnName("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("MainShareholder")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<decimal>("Shareholding")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("OwnershipId");

                    b.HasIndex("CountryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_SupplierOwnership");
                });

            modelBuilder.Entity("Generic.Data.Models.TblSupplierProfile", b =>
                {
                    b.Property<int>("SupplierProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SupplierProfileID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateofCreation")
                        .HasColumnType("datetime");

                    b.Property<string>("NatureOfBusiness")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnName("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("SupplierProfileId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tbl_SupplierProfile");
                });

            modelBuilder.Entity("Generic.Data.Models.TblThirdPartyReference", b =>
                {
                    b.Property<int>("TprId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TPR_ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TprAddress")
                        .IsRequired()
                        .HasColumnName("TPR_Address")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("TprEmailAddress")
                        .IsRequired()
                        .HasColumnName("TPR_EmailAddress")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TprName")
                        .IsRequired()
                        .HasColumnName("TPR_Name")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("TprOrganization")
                        .IsRequired()
                        .HasColumnName("TPR_Organization")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TprPhoneNumber")
                        .IsRequired()
                        .HasColumnName("TPR_PhoneNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("TprWorkPhoneNumber")
                        .IsRequired()
                        .HasColumnName("TPR_WorkPhoneNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("TprId");

                    b.ToTable("tbl_ThirdPartyReference");
                });

            modelBuilder.Entity("Generic.Data.Models.TblTypicalSubconScopeProducts", b =>
                {
                    b.Property<int>("ScsProdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SCS_ProdID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("SubConScopeId")
                        .HasColumnName("SubConScopeID")
                        .HasColumnType("int");

                    b.HasKey("ScsProdId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SubConScopeId");

                    b.ToTable("tbl_TypicalSubconScopeProducts");
                });

            modelBuilder.Entity("Generic.Data.Models.TblTypicalSubcontractedScope", b =>
                {
                    b.Property<int>("SubConScopeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SubConScopeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnName("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("SubConAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("SubConName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("SubConScopeId");

                    b.HasIndex("CountryId");

                    b.ToTable("tbl_TypicalSubcontractedScope");
                });

            modelBuilder.Entity("Generic.Data.Models.TblValueDetails", b =>
                {
                    b.Property<int>("ValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ValueID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ValueYear")
                        .HasColumnType("int");

                    b.HasKey("ValueId");

                    b.ToTable("tbl_ValueDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Default",
                            NormalizedName = "DEFAULT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Generic.Data.Models.TblApproval", b =>
                {
                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblApproval")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_Approval_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblBusinessContinuityPolicy", b =>
                {
                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblBusinessContinuityPolicy")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_BusinessContinuityPolicy_tbl_SupplierIdentification");
                });

            modelBuilder.Entity("Generic.Data.Models.TblCorpSocialResponsibility", b =>
                {
                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblCorpSocialResponsibility")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_CorpSocialResponsibility_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblCorporateDistinctives", b =>
                {
                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblCorporateDistinctives")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_CorporateDistinctives_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblCyMfgFf", b =>
                {
                    b.HasOne("Generic.Data.Models.TblCity", "City")
                        .WithMany("TblCyMfgFf")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_tbl_CY_MFG_FF_tbl_City")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblCyMfgFf")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_CY_MFG_FF_tbl_SupplierIdentification");
                });

            modelBuilder.Entity("Generic.Data.Models.TblDeliveryInfo", b =>
                {
                    b.HasOne("Generic.Data.Models.TblQuotationMasters", "QuoMaster")
                        .WithMany("TblDeliveryInfo")
                        .HasForeignKey("QuoMasterId")
                        .HasConstraintName("FK_tbl_DeliveryInfo_tbl_QuotationMaster")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblDirectServiceScope", b =>
                {
                    b.HasOne("Generic.Data.Models.TblSubCategory", "SubCategory")
                        .WithMany("TblDirectServiceScope")
                        .HasForeignKey("SubCategoryId")
                        .HasConstraintName("FK_tbl_DirectServiceScope_tbl_SubCategory")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblFinStockMarketInfo", b =>
                {
                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblFinStockMarketInfo")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_FinStockMarketInfo_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblFinancialAudits", b =>
                {
                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblFinancialAudits")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_FinancialAudits_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblFinancialStatements", b =>
                {
                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblFinancialStatements")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_FinancialStatements_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblForeignCompany", b =>
                {
                    b.HasOne("Generic.Data.Models.TblProducts", "ProductSuppliedNavigation")
                        .WithMany("TblForeignCompany")
                        .HasForeignKey("ProductSupplied")
                        .HasConstraintName("FK_tbl_ForeignCompany_tbl_Products")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblForeignCompany")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_ForeignCompany_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblHealthSafetyEnvironment", b =>
                {
                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblHealthSafetyEnvironment")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_HealthSafetyEnvironment_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblHseCertification", b =>
                {
                    b.HasOne("Generic.Data.Models.TblCertifyingOrg", "CertOrg")
                        .WithMany("TblHseCertification")
                        .HasForeignKey("CertOrgId")
                        .HasConstraintName("FK_tbl_HSE_Certification_tbl_CertifyingOrg")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblHseCertification")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_HSE_Certification_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblKnowledgeDgssysytems", b =>
                {
                    b.HasOne("Generic.Data.Models.TblProductEquipmentService", "ProdEquSer")
                        .WithMany("TblKnowledgeDgssysytems")
                        .HasForeignKey("ProdEquSerId")
                        .HasConstraintName("FK_tbl_KnowledgeDGSSysytems_tbl_ProductEquipmentService")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblMainCustomers", b =>
                {
                    b.HasOne("Generic.Data.Models.TblCountry", "Country")
                        .WithMany("TblMainCustomers")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_tbl_MainCustomers_tbl_Country")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblProductEquipmentService", "ProdEquSer")
                        .WithMany("TblMainCustomers")
                        .HasForeignKey("ProdEquSerId")
                        .HasConstraintName("FK_tbl_MainCustomers_tbl_ProductEquipmentService")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblMainCustomers")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_MainCustomers_tbl_SupplierIdentification")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblValueDetails", "Value")
                        .WithMany("TblMainCustomers")
                        .HasForeignKey("ValueId")
                        .HasConstraintName("FK_tbl_MainCustomers_tbl_ValueDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblNumberOfEmployees", b =>
                {
                    b.HasOne("Generic.Data.Models.TblDepartments", "Department")
                        .WithMany("TblNumberOfEmployees")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_tbl_NumberOfEmployees_tbl_Departments")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblNumberOfEmployees")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_NumberOfEmployees_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblOfficeServiceCl", b =>
                {
                    b.HasOne("Generic.Data.Models.TblCity", "City")
                        .WithMany("TblOfficeServiceCl")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_tbl_OfficeServiceCL_tbl_City")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblCountry", "Country")
                        .WithMany("TblOfficeServiceCl")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_tbl_OfficeServiceCL_tbl_Country")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblOfficeServiceCl")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_OfficeServiceCL_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblPaymentRequestDetails", b =>
                {
                    b.HasOne("Generic.Data.Models.TblPaymentRequestMaster", "PayReqMaster")
                        .WithMany("TblPaymentRequestDetails")
                        .HasForeignKey("PayReqMasterId")
                        .HasConstraintName("FK_tbl_PaymentRequestDetails_tbl_PaymentRequestMaster")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblPaymentRequestMaster", b =>
                {
                    b.HasOne("Generic.Data.Models.TblDepartments", "DepartmentProjectNavigation")
                        .WithMany("TblPaymentRequestMaster")
                        .HasForeignKey("DepartmentProject")
                        .HasConstraintName("FK_tbl_PaymentRequestMaster_tbl_Departments")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblPaymentBank", "PymntBank")
                        .WithMany("TblPaymentRequestMaster")
                        .HasForeignKey("PymntBankId")
                        .HasConstraintName("FK_tbl_PaymentRequestMaster_tbl_PaymentBank")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblPaymentRequestMaster")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_PaymentRequestMaster_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblProducts", b =>
                {
                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblProducts")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_Products_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblPurchaseCondition", b =>
                {
                    b.HasOne("Generic.Data.Models.TblPurchaseOrder", "Po")
                        .WithMany("TblPurchaseCondition")
                        .HasForeignKey("PoId")
                        .HasConstraintName("FK_tbl_PurchaseCondition_tbl_PurchaseOrder")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblPurchaseOrder", b =>
                {
                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblPurchaseOrder")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_PurchaseOrder_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblPurchaseOrderDetails", b =>
                {
                    b.HasOne("Generic.Data.Models.TblPurchaseOrder", "Po")
                        .WithMany("TblPurchaseOrderDetails")
                        .HasForeignKey("PoId")
                        .HasConstraintName("FK_tbl_PurchaseOrderDetails_tbl_PurchaseOrder")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblQualityCertification", b =>
                {
                    b.HasOne("Generic.Data.Models.TblCertifyingOrg", "CertOrg")
                        .WithMany("TblQualityCertification")
                        .HasForeignKey("CertOrgId")
                        .HasConstraintName("FK_tbl_QualityCertification_tbl_CertifyingOrg")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblQualityCertification")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_QualityCertification_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblQualityManagement", b =>
                {
                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblQualityManagement")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_QualityManagement_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblQuotationApproval", b =>
                {
                    b.HasOne("Generic.Data.Models.TblQuotationMasters", "QuoMaster")
                        .WithMany("TblQuotationApproval")
                        .HasForeignKey("QuoMasterId")
                        .HasConstraintName("FK_tbl_QuotationApproval_tbl_QuotationMasters")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblQuotationDetail", b =>
                {
                    b.HasOne("Generic.Data.Models.TblQuotationMasters", "QuoMaster")
                        .WithMany("TblQuotationDetail")
                        .HasForeignKey("QuoMasterId")
                        .HasConstraintName("FK_tbl_QuotationDetail_tbl_QuotationMasters")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblQuotationMasters", b =>
                {
                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblQuotationMasters")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_QuotationMaster_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblQuotationOtherInfo", b =>
                {
                    b.HasOne("Generic.Data.Models.TblQuotationMasters", "QuoMaster")
                        .WithMany("TblQuotationOtherInfo")
                        .HasForeignKey("QuoMasterId")
                        .HasConstraintName("FK_tbl_QuotationOtherInfo_tbl_QuotationMasters")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblServices", b =>
                {
                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblServices")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_Services_tbl_SupplierIdentification");
                });

            modelBuilder.Entity("Generic.Data.Models.TblSpDirectServiceScope", b =>
                {
                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblSpDirectServiceScope")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_SP_DirectServiceScope_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblSpDssServices", b =>
                {
                    b.HasOne("Generic.Data.Models.TblServices", "Service")
                        .WithMany("TblSpDssServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_tbl_SP_DSS_Services_tbl_Services")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblSpDirectServiceScope", "SpDss")
                        .WithMany("TblSpDssServices")
                        .HasForeignKey("SpDssid")
                        .HasConstraintName("FK_tbl_SP_DSS_Services_tbl_SP_DirectServiceScope")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblSubCategory", b =>
                {
                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblSubCategory")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_SubCategory_tbl_SupplierIdentification");
                });

            modelBuilder.Entity("Generic.Data.Models.TblSubContractedDetails", b =>
                {
                    b.HasOne("Generic.Data.Models.TblCountry", "Country")
                        .WithMany("TblSubContractedDetails")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_tbl_SubContractedDetails_tbl_Country")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblSubContractedServices", "SubServ")
                        .WithMany("TblSubContractedDetails")
                        .HasForeignKey("SubServId")
                        .HasConstraintName("FK_tbl_SubContractedDetails_tbl_SubContractedServices")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblSubContractedServices", b =>
                {
                    b.HasOne("Generic.Data.Models.TblServices", "Service")
                        .WithMany("TblSubContractedServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_tbl_SubContractedServices_tbl_Services")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblSubContractedServices")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_SubContractedServices_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblSubsidiaryCompany", b =>
                {
                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblSubsidiaryCompany")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_SubsidiaryCompany_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblSupplierIdentification", b =>
                {
                    b.HasOne("Generic.Data.Models.TblContactPersons", "ContactPerson")
                        .WithMany("TblSupplierIdentification")
                        .HasForeignKey("ContactPersonId")
                        .HasConstraintName("FK_tbl_SupplierIdentification_tbl_ContactPersons")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblFormIdentification", "Form")
                        .WithMany("TblSupplierIdentification")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK_tbl_SupplierIdentification_tbl_FormIdentification")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblThirdPartyReference", "Tpr")
                        .WithMany("TblSupplierIdentification")
                        .HasForeignKey("TprId")
                        .HasConstraintName("FK_tbl_SupplierIdentification_tbl_ThirdPartyReference")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblSupplierOwnership", b =>
                {
                    b.HasOne("Generic.Data.Models.TblCountry", "Country")
                        .WithMany("TblSupplierOwnership")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_tbl_SupplierOwnership_tbl_Country")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblSupplierOwnership")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_SupplierOwnership_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblSupplierProfile", b =>
                {
                    b.HasOne("Generic.Data.Models.TblSupplierIdentification", "Supplier")
                        .WithMany("TblSupplierProfile")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_tbl_SupplierProfile_tbl_SupplierIdentification")
                        .IsRequired();
                });

            modelBuilder.Entity("Generic.Data.Models.TblTypicalSubconScopeProducts", b =>
                {
                    b.HasOne("Generic.Data.Models.TblProducts", "Product")
                        .WithMany("TblTypicalSubconScopeProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_tbl_TypicalSubconScopeProducts_tbl_Products")
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.TblTypicalSubcontractedScope", "SubConScope")
                        .WithMany("TblTypicalSubconScopeProducts")
                        .HasForeignKey("SubConScopeId")
                        .HasConstraintName("FK_tbl_TypicalSubconScopeProducts_tbl_TypicalSubcontractedScope");
                });

            modelBuilder.Entity("Generic.Data.Models.TblTypicalSubcontractedScope", b =>
                {
                    b.HasOne("Generic.Data.Models.TblCountry", "Country")
                        .WithMany("TblTypicalSubcontractedScope")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_tbl_TypicalSubcontractedScope_tbl_Country")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Generic.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Generic.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Generic.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Generic.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
